#!/bin/sh

if ! command -v brew >/dev/null 2>&1; then
    echo "Installing Homebrew."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" >/dev/null
fi

# TODO: This is set in a file that is sourced by something installed by brew
# bundle.
if [ -f "$HOMEBREW_BUNDLE_FILE" ]; then
    echo "Updating Homebrew bundle."
    brew update >/dev/null
    brew bundle
    brew cleanup >/dev/null
fi

if [ "${SHELL: -4:4}" != "fish" ]; then
    if ! grep --quiet "$(brew --prefix)/bin/fish" /etc/shells; then
        echo "Adding fish to /etc/shells."
        echo $(brew --prefix)/bin/fish | sudo tee -a /etc/shells
    fi
    echo "Making fish the default shell. (Did you remember to log out and back in?)"
    chsh -s $(brew --prefix)/bin/fish
fi

if command -v mise >/dev/null 2>&1; then
    echo "Installing mise completions."
    mise complete --shell fish > $XDG_CONFIG_HOME/fish/completions/mise.fish

    echo "Installing mise runtimes."
    mise install

    for version in $(mise list python --installed | cut -d " " -f 3); do
        echo "Installing Python $version libraries."
        mise exec python@$version -- python -m pip install --upgrade pip wheel >/dev/null
        mise exec python@$version -- pip install --upgrade --requirement $XDG_CONFIG_HOME/mise/default_python_packages >/dev/null
    done

    echo "Installing Rust libraries."
    cargo install stylua
fi

if command -v fzf >/dev/null 2>&1; then
    echo "Installing fzf."
    # Update shell configurations but skip fish since that's managed by source
    # control.
    $(brew --prefix)/opt/fzf/install --key-bindings --completion --update-rc --no-fish
fi

if command -v fish >/dev/null 2>&1; then
    if command -v vf >/dev/null 2>&1; then
        echo "Installing virtualfish."
        fish -c "vf install" >/dev/null
    fi
    echo "Registering virtualfish plugins."
    fish -c "vf addplugins auto_activation" >/dev/null
    fish -c "vf addplugins global_requirements" >/dev/null

    if [ -f "$HOME/.virtualenvs/global_requirements.txt" ]; then
        echo "Installing requirements into virtual environments."
        # The only entry point to installing the requirements is through
        # `vf requirements`. This opens the global requirements file into $EDITOR
        # and then runs `pip install` after the editor exits. By using `echo` as the
        # editor instead, we can install the requirements without further user
        # interaction.
        # TODO: This can be switched to `true` in fish 3.2.
        fish -c "set EDITOR echo; vf requirements" >/dev/null
    fi
fi

echo "Installing Neovim plugins and packages."
if command -v nvim >/dev/null 2>&1; then
    nvim --headless \
        -c "Lazy restore" \
        -c "Mason" \
        -c "qall"
fi

# Make the Maildir directories. isync seems to want them to exist rather than
# just creating them if they aren't there.
echo "Creating mailboxes."
if command -v neomutt >/dev/null 2>&1; then
    mkdir -p $HOME/Mail/bigapplepy >/dev/null
    mkdir -p $HOME/Mail/dirnonline >/dev/null
    mkdir -p $HOME/Mail/gmail >/dev/null
    mkdir -p $HOME/Mail/pygotham >/dev/null
fi

echo "Updating Tmux Plugin Manager"
if test ! -d $XDG_CONFIG_HOME/tmux/plugins/tpm; then
    mkdir $XDG_CONFIG_HOME/tmux/plugins
    git clone https://github.com/tmux-plugins/tpm $XDG_CONFIG_HOME/tmux/plugins/tpm
fi
$XDG_CONFIG_HOME/tmux/plugins/tpm/bin/install_plugins

if command -v softwareupdate >/dev/null 2>&1; then
    echo "Installing software updates"
    softwareupdate --all --install --force
fi

echo "Completed" $(date)
